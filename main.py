import os
from aiogram import Bot, Dispatcher, executor, types
from aiogram.contrib.fsm_storage.memory import MemoryStorage
from states import MyStates, User
import bd
import keyboards as kb
import translators as ts
import re
import emoji

bd = bd.DataBase()
TOKEN = '5677022662:AAGhuoMRImgWYu1mX01OP4_Vh8SgeKxMHOs'
print(TOKEN)
bot = Bot(token=TOKEN)
dp = Dispatcher(bot, storage=MemoryStorage())

users = {}
# —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ñ–æ—Ç–æ –∏–∑ –ø–∞–ø–∫–∏ img —É—Ä–æ–∫–æ–≤ –ø–æ –≥—Ä–∞–º–º–∞—Ç–∏–∫–µ
# –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–∏ —Å –≤—ã–±—Ä–∞–Ω–Ω–æ–π —Ç–µ–º–æ–π –∏–∑ —Å–æ–¥–µ—Ä–∂–∞–Ω–∏—è
@dp.message_handler(state=MyStates.STATES_0)
async def word_test(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    chat_id = message.from_user.id
    numb = list(range(1, 49))
    for i in numb:
        if message.text == f'{i}':
            keyboard=kb.get_menu()
            await bot.send_photo(chat_id=message.from_user.id, photo=types.InputFile(f'img/{i}.jpg'))
            await message.answer(f'{emoji.emojize("‚úÖ")}–î–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –Ω–∞–∂–º–∏—Ç–µ - /main. '
                                 '\nTo go to the main menu enter  - /main', reply_markup=keyboard)
    commands = ['MAIN MENU', '/main', 'Word Translator', '/translate', 'Add Personal Info', '/contacts', 'Video Lessons',
                '/videolessons', 'Gramma in Picture', '/grammainpicture', 'Show Personal Info', '/showpersonalinfo',
                '/cancel']
    for i in commands:
        if message.text == i:
            keyboard = kb.keyboard_menu
            await message.answer(f'{emoji.emojize("‚úÖ")}–í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ "–ì–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é" / Choose a new command from "MAIN MENU', reply_markup=keyboard)
            await state.set_state('*')
            if message.text == 'Word Translator':
                await state.set_state(MyStates.all()[2])
            elif message.text == 'Add Personal Info':
                await state.set_state(MyStates.all()[3])
# –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤–≤–æ–¥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è (–æ—Ç 1 –¥–æ 48), –∏—Å—Ö–æ–¥—è –∏–∑ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–µ–º.
# –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Å–ø–∏—Å–∫—É commands, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
# —Å–æ–æ–±—â–µ–Ω–∏–µ "Try again" –∏ –∑–∞—Å—Ç–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–æ–¥–∏—Ç—å –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
# –µ—Å–ª–∏ –≤–≤–µ–¥–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç —Å–ø–∏—Å–∫—É commands, —Ç–æ –ø–µ—Ä–µ–±—Ä–∞—Å—ã–≤–∞–µ–º –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if message.text.isalpha():
        await message.answer(f'{emoji.emojize("üòû")}–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ / Try again')
    elif message.text.isdigit():
        if int(message.text)>=49:
            await message.answer(f'{emoji.emojize("üòû")}–ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞ / Try again')
# —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –±–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ —Ç–µ–ª–µ—Ñ–æ–Ω
# —ç—Ç—É –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∑–∞–Ω–æ—Å–∏–º –≤ –Ω–∞—à—É –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
@dp.message_handler(content_types='contact', state=MyStates.STATES_3)
async def ph(message: types.Message):
    chat_id = message.from_user.id
    state = dp.current_state(user=chat_id)
    print(message.contact.phone_number)
    print(message.from_id)
    phone = {
        'phone': message.contact.phone_number,
    }
    bd.update_user(telegram_id=message.from_id, data=phone)
    # await state.set_state(MyStates.all()[2])
    await bot.send_message(chat_id=message.from_user.id, text= f"–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à –∫–æ–Ω—Ç–∞–∫—Ç / Thank's for your contact {emoji.emojize('üíó')}")
# —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –±–æ—Ç –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥ —Å–ª–æ–≤ –±–ª–∞–≥–æ–¥–∞—Ä—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω–æ–º—É –º–æ–¥—É–ª—é translators
# –∏–∑–Ω–∞—á–∞–ª—å–Ω–æ –¥–µ–ª–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–∞ —Ä—É—Å—Å–∫–∏–π/–∞–Ω–≥–ª–∏–π—Å–∫–∏–π –∞–ª—Ñ–∞–≤–∏—Ç? —á—Ç–æ–±—ã –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Å –∫–∞–∫–æ–≥–æ —è–∑—ã–∫–∞ –±—É–¥–µ–º –ø–µ—Ä–µ–≤–æ–¥–∏—Ç—å
# –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ –ø—Ä–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ (–Ω–∞–∂–∞—Ç–∏–µ –Ω–∞ –∫–æ–º–∞–Ω–¥—É –∏–ª–∏ –∫–Ω–æ–ø–∫–æ–π –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã)
@dp.message_handler(state=MyStates.STATES_2)
async def name(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    chat_id = message.from_user.id
    if message.text == '/cancel' or message.text == 'end' or message.text == 'Stop translator':
        keyboard = kb.keyboard_menu
        await message.answer('The end',reply_markup=keyboard)
        await state.set_state('*')
    else:
        if bool(re.search('[–∞-—è–ê-–Ø]', message.text)) == False:
            translate = ts.google(message.text, to_language='ru')
            keyboard = kb.get_kbrd_translate()
            await message.answer(f'–ü–µ—Ä–µ–≤–æ–¥ —Å –∞–Ω–≥–ª–∏–π—Å–∫–æ–≥–æ / Translation from English {emoji.emojize("üî§")}')
            await bot.send_message(chat_id=message.from_user.id, text=translate)
        else:
            translate = ts.google(message.text, to_language='en')
            keyboard = kb.get_kbrd_translate()
            await message.answer(f'–ü–µ—Ä–µ–≤–æ–¥ —Å —Ä—É—Å—Å–∫–æ–≥–æ / Translation from Russian {emoji.emojize("üî§")}')
            await bot.send_message(chat_id=message.from_user.id, text=translate)
        await message.answer(f"–î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–∞ –≤–≤–µ–¥–∏—Ç–µ - /cancel {emoji.emojize('‚ùå')}\n To stop the translator, enter - /cancel {emoji.emojize('‚ùå')}",reply_markup=keyboard)
# —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –ø—Ä–∏ –∫–æ—Ç–æ—Ä–æ–º –±–æ—Ç –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤–≤–µ—Å—Ç–∏ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É
# –ø–æ—Å–ª–µ —á–µ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∏–º—Å—è –≤ —Å–ª–µ–¥—É—é—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ, –≥–¥–µ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ email
@dp.message_handler(state=MyStates.STATES_3)
async def user_data(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    if message.text == 'MAIN MENU' or message.text == '/main':
        keyboard = kb.keyboard_menu
        await message.answer(message.text, reply_markup=keyboard)
        await state.set_state('*')
    elif message.text == 'Email':
        text = f'–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π email / Enter your email {emoji.emojize("üíå")}'
        await bot.send_message(chat_id=message.from_user.id, text=text)

        await state.set_state(MyStates.all()[4])
# —Å –ø–æ–º–æ—â—å—é —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å email
# –ø—Ä–∏ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –≤–≤–æ–¥–µ –ø—Ä–æ—Å–∏–º –≤–≤–æ–¥–∏—Ç—å –∑–∞–Ω–æ–≤–æ
# –ø—Ä–∏ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º - –≤–æ–∑–≤—Ä–∞—Ç –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é –∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏—é —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–≥–æ –∞–¥—Ä–µ—Å–∞ –≤ –ë–î
@dp.message_handler(state=MyStates.STATES_4)
async def user_data(message: types.Message):
    state = dp.current_state(user=message.from_user.id)
    chat_id = message.from_user.id
    pattern = r"^[a-zA-Z0-9]{1,100}[@][a-z]{2,6}\.[a-z]{2,4}"
    number_re = re.compile(pattern)
    if message.text == 'MAIN MENU' or message.text == '/main':
        keyboard = kb.keyboard_menu
        await message.answer(message.text, reply_markup=keyboard)
        await state.set_state('*')
    else:
        # if number_re.findall(message.text):
        if bool(re.search(pattern, message.text)) == True:
            await message.answer(f"–°–ø–∞—Å–∏–±–æ –∑–∞ –í–∞—à—É —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É / Thank's for your email {emoji.emojize('üíó')}")
            keyboard = kb.keyboard_menu
            await message.answer(message.text, reply_markup=keyboard)
            await state.set_state('*')
        else:
            await message.answer(f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑, –≤–≤–µ–¥–∏—Ç–µ —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω—É—é –ø–æ—á—Ç—É —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞: example@gmail.com {emoji.emojize('üì©')} / Try again, enter email format like: example@gmail.com {emoji.emojize('üì©')}")
        email = {
                'email': message.text,
            }
        bd.update_user(telegram_id=message.from_id, data=email)
        # await state.set_state(MyStates.all()[3])
# –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
# –µ—Å–ª–∏ —Ç–∞–∫–æ–≥–æ –Ω–µ—Ç, —Ç–æ –∑–∞–Ω–æ—Å–∏–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ –±–∞–∑—É
@dp.message_handler(state='*')
async def echo(message: types.Message):
    chat_id = message.from_user.id
    user = {
                'telegram_id': f'{message.from_user.id}',
                'first_name': f'{message.from_user.first_name}',
                'last_name': f'{message.from_user.last_name}',}
    users.update({message.from_user.id: {message.from_user.first_name: message.from_user.last_name}})
    if len(bd.get_user(message.from_user.id)) == 0:
        bd.add_item(table='Users', data=user)
    users.update({message.from_user.id: message.from_user.first_name})
# –µ—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞ –Ω–∞—á–∞–ª—å–Ω–æ–º —ç—Ç–∞–ø–µ —á—Ç–æ-—Ç–æ –Ω–∞–ø–∏—Å–∞–ª –≤ —á–∞—Ç,
# —Ç–æ –µ–º—É –ø—Ä–∏—Å—ã–ª–∞—é—Ç –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á—Ç–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ
    if message.text.isalnum():
        keyboard = kb.keyboard_menu
        await message.answer(f'–ù–∞–∂–º–∏ /start –¥–ª—è –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã {emoji.emojize("‚úÖ")}/ Enter /start to start work {emoji.emojize("‚úÖ")}', reply_markup=keyboard)
    elif message.text == 'Start' or message.text == '/start' or message.text == 'start' or message.text == '/main':
        keyboard = kb.keyboard_menu
        await message.answer(f"Hello {message.from_user.first_name} {message.from_user.last_name}! Select an action from the'MAIN MENU' to get started ‚ò∫", reply_markup=keyboard)
    elif message.text == '/help' or message.text == 'help' or message.text == 'Help':
        await message.answer(f"–≠—Ç–æ—Ç –±–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ –∏–∑—É—á–∏—Ç—å –∞–Ω–≥–ª–∏–π—Å–∫–∏–π {emoji.emojize('üá¨üáß')}–∏–ª–∏ —Å—Ç–∞–Ω–µ—Ç —Ç–≤–æ–∏–º –ª–∏—á–Ω—ã–º –ø–µ—Ä–µ–≤–æ–¥—á–∏–∫–æ–º.–ü—Ä–æ—Å—Ç–æ –Ω–∞–∂–º–∏ 'Let's begin'{emoji.emojize('üí™')} –∏ –ø–æ—Å–ª–µ —ç—Ç–æ–≥–æ –≤—ã–±–µ—Ä–∏ –Ω—É–∂–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é.\n\nThis bot will help you learn English {emoji.emojize('üá¨üáß')} or become your personal translator.Just click on 'Let's begin'{emoji.emojize('üí™')} and then select the category you want.")
# –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ–±—É—á–∞—é—â–∏–µ –≤–∏–¥–µ–æ —Å –ø–æ–º–æ—â—å—é –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
    elif message.text == 'Video Lessons' or message.text == '/videolessons':
        keyboard = kb.more_kbrd()
        await message.answer(f'–í–∏–¥–µ–æ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –¥–ª—è —Ç–µ–±—è / Video materials for you {emoji.emojize("üé•")}: ', reply_markup = keyboard)
# –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –º–µ–Ω—é —Å –Ω—É–º–µ—Ä–∞—Ü–∏–µ–π —Ç–µ–º, –ø–æ—Å–ª–µ —á–µ–≥–æ –ø–µ—Ä–µ–Ω–æ—Å–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ,
# –≥–¥–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–µ —Ñ–æ—Ç–æ —É—Ä–æ–∫–∞ –ø–æ –∑–∞–¥–∞–Ω–Ω–æ–º—É –Ω–æ–º–µ—Ä—É
    elif message.text == 'Gramma in Picture' or message.text == '/grammainpicture':
        state = dp.current_state(user=chat_id)
        keyboard = kb.get_menu()
        await bot.send_photo(chat_id=message.from_user.id, photo=types.InputFile('img/0.jpg'))
        await message.answer(f'–í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ–π —Ç–µ–º—ã / Enter the number of topics {emoji.emojize("üî¢")}', reply_markup = keyboard)
        await state.set_state(MyStates.all()[0])
# –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∑–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç –Ω–µ–≥–æ –¥–∞–Ω–Ω—ã—Ö
    elif message.text == 'Add Personal Info' or message.text == '/contacts':
        state = dp.current_state(user=chat_id)
        keyboard = kb.get_kbrd()
        await state.set_state(MyStates.all()[3])
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å–≤–æ–π email –∏ —Ç–µ–ª–µ—Ñ–æ–Ω –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –Ω–∞—à–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è.{emoji.emojize('üì±')} \nEnter your email and share your contact to subscribe for our updates.{emoji.emojize('üì±')}",reply_markup=keyboard)
# –∑–∞–ø—Ä–∞—à–∏–≤–∞–µ—Ç —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Ñ—Ä–∞–∑—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞, –∑–∞—Ç–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ,
# –≥–¥–µ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç —è–∑—ã–∫ –≤–≤–µ–¥–µ–Ω–Ω–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –≤—ã–ø–æ–ª–Ω—è–µ—Ç –ø–µ—Ä–µ–≤–æ–¥
    elif message.text == '/translate' or message.text == 'Word Translator':
        state = dp.current_state(user=chat_id)
        await message.answer(f"–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–æ –∏–ª–∏ —Ñ—Ä–∞–∑—É –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ / Enter a word or phrase to translate {emoji.emojize('üá¨üáß')}")
        await state.set_state(MyStates.all()[2])
# –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é, –∫–æ—Ç–æ—Ä—É—é —Ö—Ä–∞–Ω–∏—Ç –±–æ—Ç —É —Å–µ–±—è –≤ –ë–î
    elif message.text == 'Show Personal Info' or message.text == '/showpersonalinfo':
        user = bd.get_user(message.from_user.id)
        user_text = f'Personal Info {emoji.emojize("üòé")}:\n' \
                    f'telegram_id: {user[0][0]}\n' \
                    f'first_name: {user[0][1]}\n' \
                    f'last_name: {user[0][2]}\n' \
                    f'phone: {user[0][3]}\n' \
                    f'email: {user[0][4]}\n'
        await message.answer(user_text)

@dp.callback_query_handler()
async def call_echo(callback_q: types.CallbackQuery):
    await bot.answer_callback_query(callback_q.id)
    await bot.send_message(chat_id=callback_q.from_user.id, text=callback_q.data)

if __name__ == '__main__':
    executor.start_polling(dp)
